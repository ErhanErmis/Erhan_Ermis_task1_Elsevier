#Automating E2E UI &API test.

Prepared by:
Erhan Ermis

QA Automation Engineer

londoner.han@gmail.com

www.linkedin.com/in/erhan-ermis

Build Tool: Maven

Test Framework: Cucumber BBD (with Junit 4 Assertions)

Test RUN

Notes: To run all Scenarios, use @UI tag for UI tests and @API tag for API tests in the CukesRunner class/Cucumber Options

1. Way:
Clone the projects

Import maven dependencies from POM

Go src -> test > java > com > test > ErhanErmis >runners > CukesRunner and RUN

To generate "HTML Maven Cucumber Report" ;

Open Maven right-side panel Double Click Project's Lifecycle Click "verify"

2. Way:
Run from command line invoke mvn clean verify

To view the HTML report:
Open one of the HTML files under target/cucumber-html-reports in a browser.

Questions & Responses:
API Test:
The goal of the API testing is to verify that API functions as defined in the Swagger Documentation.
In order to do that I check if each Rest Api endpoint is working as expected or not.
How do I do this?
I send Get, Post, Put, Delete, patch type of requests and verify response status code, response body and header.
What test cases would you cover?
I do positive and negative testing of API.
Positive: valid request parameters(query, path), valid headers, valid request json body
Negative: invalid request parameters(query, path), invalid headers, invalid request json body

# BUG FOUND: In this test, The API did not respond as expected to an invalid query and sent 200 (successful) statuscode instead of 400.
Therefore test failed. Test results can be seen in the test report.

What libraries would you use? RestASSURED library and for assertions I used TestNG.

How could you provide CI/CD: I can create a Jenkins setting via github repository connection and for every kind of change system triggered a verify via maven.

Framework Description:

My framework is a Selenium Cucumber BDD framework. Java is my coding language.
I interact with browsers through Selenium Webdriver Manager and I use JUnit as my assertion tool to verify test results.

I apply Java OOP principles in my Framewok. My Framework is based on Page Object Model design. You can think of my framework as a folder structure in which every folder serves a specific purpose and interacts with each other.
In this structure I store my folders under test package.

I have only one file that is at the project level, which I use as a central repository to store required data for my tests like browser information and urls. I keep this data in key=value format. I name this file as configuration.properties as a best practice.

Under the test package I have two main directories: resources and java;
Resources directory keeps my feature package that contains my cucumber feature files. I store all my positive and negative test cases as scenarios in those cucumber.feature files using Gherkin language. This provides simple an understandable BDD structure even for non-technical people.

Under My Java Directory I have four packages.

First one is “Pages” package: Under this package, I create a separate java class for each web page that I will test and store all required web elements and connected methods. I use those pages as objects in my tests and trigger the required Webelements and methods through those objects. I also create an abstract class to store all Webelements and methods common to all pages. All other related page classes extend this class.


My second package stores step definitions. These step definitions are methods written in java that automate the tests and each correspond to a test step in one or more scenarios in my feature files. I also create a Hooks class to insert methods to run before and after each test like opening and closing browsers.


My third package is runners package which keeps a runner class. This runner class contains (Junit) cucumber options to connect feature files and step_definitions, to run the tests and to create reports.

My last package is Utilities package. This package stores my Driver class that invokes browsers and ConfigurationReader class that reads from configuration.properties file. In my Driver class I use singleton pattern. I also store a Utils class here in which I keep my re-useable methods like waits, simple js commands, window switch functions, etc.


For reporting and screenshots, I use maven-cucumber-reporting plugin. That provides me clear and presentable reports. I also use simple default html reports as back-up.


My frame work supports UI, Database and API testing. For Database testing I use JDBC and for automated API testing I use Java RestAssured Library.

Benefits:
I use this POM structure because it provides reusability of code, ease of maintenance and modification.
I can create my tests as independent as possible. If something changes in product design, thanks to my framework, I only need to update the required page class and my configuration.properties file.
It is also easy to add new test cases to my framework. I can reuse existing step definitions for new test cases.


Report to Developer: Some text fields properties are not defined properly.They accept inappropriate character. (Ex:post code field).
Possible improvement in test: Test scenarios can be expanded to include negative scenarios.














Explanation of the task:

Create a E2E test that comprises the below steps:

Login to https://www.saucedemo.com/ using the "standard_user" account
Sort the products by Price (high to low)
Add the cheapest & the 2nd costliest products to your basket
Open the basket
Checkout
Enter details and Finish the purchase


What we are expecting:

Using best practices write a Test framework that can test the above user journey
Use Java or JavaScript with Cucumber/Gherkin and Selenium/WebDriverIO
We don't expect every single aspect of the journey to be thoroughly tested, but would expect to see scenario without glue code in such cases
A readme file explaining the framework briefly and how to run the tests
Pushed to GitHub or BitBucket or Gitlab


Exercise 2: Automating a WebService



API Swagger:

https://petstore.swagger.io



API REST Service:

https://petstore.swagger.io/



Endpoint for Test:

v2/pet/findByStatus



The questions will be the same:

Explain the process of how you would approach the task of automating this service.
What test cases would you cover?
What libraries would you use?


What we are expecting:

The above solution in the same readme file as for Exercise 1
Pushed to GitHub or BitBucket or Gitlab




